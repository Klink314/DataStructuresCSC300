About: Graphs Assignment 6
Date: Apr 17, 2025
Comments: Includes five files -> mainGraph.cpp graph.cpp graph.h sqll.cpp sqll.h

*** FIRST OPEN THE FOLDER WHERE THESE THREE FILES ARE LOCATED:
    In command prompt:
        use "cd A6_P1" if needed to get to where the code is stored
        code .
        use "cd graph"
*** 

To compile: g++ mainGraph.cpp graph.cpp sqll.cpp
To run: .\a.exe 


Task 4
The time complexity of Dijkstra's algorithm depends on the data structure used for selecting the next closest vertex. In this version, since I used a simple array to find the minimum distance vertex, the time complexity is O(V^2), where V is the number of vertices. This is acceptable for small graphs but can be inefficient for large ones. 

Kruskal's algorithm sorts all edges first, which takes O(E log E) time, where E is the number of edges. After sorting, it uses a union-find structure to check for cycles when adding edges to the Minimum Spanning Tree (MST). Each union or find operation takes nearly constant time, so the overall complexity remains O(E log E), mainly due to the sorting step. 

Prim's algorithm, in this implementation, uses a basic method to find the next vertex with the minimum weight, leading to a time complexity of O(V^2), similar to Dijkstra's with arrays. With a more advanced data structure like a min-heap, it could be improved to O(E log V)

All three algorithms are efficient for different purposes: Dijkstra is best for shortest paths from a single source, Kruskal is good for sparse graphs when building an MST, and Prim is efficient for dense graphs when starting from a specific vertex.
